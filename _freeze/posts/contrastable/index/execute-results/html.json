{
  "hash": "926145438d894c2291a087850a6bc2d2",
  "result": {
    "markdown": "---\ntitle: \"Contrastable\"\nauthor: \n - name: Thomas Sostarics\n - url: https://tsostarics.com/\n - affiliation: Northwestern University Department of Linguistics\n - orcid: 0000-0002-1178-7967\ndate: '2022-07-13'\ncitation:\n  url: https://tsostaricsblog.netlify.app/posts/contrastable/\neditor: source\ndescription: \"This post gives an overview of an R package I've written. The contrastable package provides a tidy approach to contrast coding for regression analyses.\"\nbibliography: mybib.bib\ncategories: ['R pkg']\ncode-tools: false\ncode-fold: 'show'\nexecute:\n  message: false\n  echo: true\n---\n\n\n\nI've been working on a package called `contrastable` on and off for the past\nyear or so.\nThe package's goal is to provide a tidy approach to setting factor contrasts\nfor regression analysis.\nWhile this can be done with repeated `contrasts<-` calls, this workflow\nis tedious when working with multiple factors and especially error-prone\nwhen manually specifying contrast matrices to use.\nIn this latter case, the user would need to be careful to specify the correct\nfractions in the correct order with the correct signs, which can be a lot to\nkeep track of.\nThese issues quickly become apparent when the number of factor levels is\ngreater than 2.\nIn this post I will:\n\n- Run through an example of a typical contrast coding workflow using `contrasts<-`.\nI will give an example of an error that can arise due to a typo, and show\nhow to diagnose what this error actually reflects by checking the hypothesis\nmatrix.\n- Show how the `contrastable` package can be used to sidestep mistakes caused\nby error-prone and tedious calls to `contrasts<-`.\n- Briefly link to other packages on contrasts and level comparisons.\n\n::: {.callout-tip}\n## Where to find contrastable\n\nYou can find the `contrastable` package on my Github at this repo: [tsostarics/contrastable](https://github.com/tsostarics/contrastable)\nYou can install it like so:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndevtools::install_github('tsostarics/contrastable')\nremotes::install_github('tsostarics/contrastable')\n```\n:::\n\n\n:::\n\n## Contrasts overview\n\nContrast coding refers to assigning numeric values to levels of a categorical \nvariable for use in regression analyses.\nDepending on the numbers used, different comparisons can be made between the\ngroup means of a variable.\nThese comparisons can correspond to particular null hypotheses that a\nresearcher might have, and particular combinations of numbers can encode\nhigh-level questions like \"Are there differences between levels when compared\nto a common reference level?\" or \"Does each level differ from the levels\nthat came before it?\"\nCritically, the contrasts used don't impact the model fit but do impact the\ncoefficient estimates that are used to make inferences about the data.\nFor example, you might conclude that there's an overall effect of some\nfactor when in reality the effect (shown by the coefficient estimate) is an \neffect that only holds for one particular group!\n\nConsider an example where you have two groups of listeners where English is\ntheir native (L1) or non-native (L2) language.\nYou might be interested in whether reading times are slower or faster in\ntwo different syntactic conditions, such as active vs passive constructions.\nTwo possible research questions might be whether there's an *main* effect of \nsyntax on reading times on the one hand or whether there's a *simple* effect\nsuch that reading times in the passive construction are only slower for L2\nspeakers.[^marginal]\nThese are similar, but different, research questions and more importantly,\nthe interpretation of one coefficient depends on how *other* variables are\ncoded. \nMany researchers realize (or are starting to at least) that the default[^defaults]\n\"0/1 contrasts\" (aka treatment or dummy coding) will only give them the simple\neffect of structure, but if what you're interested in is that *main* effect, \nthen your statistics has not yet answered your question!\nTo rectify this, researchers will opt for \"the +.5/-.5 contrasts\" to obtain\nmain effects.\n\n[^marginal]: One might also see main effects referred to as *marginal effects*\nand simple effects referred to as *conditional effects*. For the latter, the idea\nis that, for example, the \"effect of syntax\" is the effect of syntax *given* the\nreference level of the other categorical predictor. The main effect of syntax\nwould be the average of the syntax effect for the L1 group and the syntax\neffort for the L2 group.\n\n[^defaults]: You can view your default contrasts using `options('contrasts')`,\nwhere the unordered default is typically `contr.treatment` and the ordered \ndefault is typically `contr.poly`. I do not recommend changing these defaults\nbecause even though you may save some time for yourself, if you forget to\nexplicitly mention that you changed the defaults then your analyses won't be\nreproducible by the vast majority of others who have not changed the deafults.\n\n:::{.callout-warning}\n## Warning: Naming inconsistency\n\nThe name for this contrast scheme is *not consistent*, especially in the\n2-level case where the values are +.5/-.5.\nI've seen it called sum coding, simple coding, effects coding, scaled sum \ncoding, helmert coding, difference coding, contrast coding, sum-to-zero coding,\nand +.5/-.5 coding.\nSee @brehm2022\nfor concerns about transparent descriptions of contrast coding schemes.\n:::\n\nWhile researchers may differ on what they call +.5/-.5, for 2 levels the result\nis nonetheless the same.\nBut, a researcher using \"helmert coding\" and a researcher using \"scaled sum\ncoding\" for a factor with 3 or more levels will be using very different\ncontrast matrices, and thus address very different research questions\nabout the data.\nLet's use some functions from `contrastable` to look at how these contrast\nmatrices differ.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(contrastable)\n```\n:::\n\n\n::: {.panel-tabset}\n\n## 2 levels\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nhelmert_code(2) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]\n[1,]  1/2\n[2,] -1/2\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nscaled_sum_code(2) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [,1]\n1  1/2\n2 -1/2\n```\n:::\n:::\n\n\n## 3 levels\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nhelmert_code(3) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]  2/3    0\n[2,] -1/3  1/2\n[3,] -1/3 -1/2\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nscaled_sum_code(3) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [,1] [,2]\n1  2/3 -1/3\n2 -1/3  2/3\n3 -1/3 -1/3\n```\n:::\n:::\n\n\n## 5 levels\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nhelmert_code(5) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]  4/5    0    0    0\n[2,] -1/5  3/4    0    0\n[3,] -1/5 -1/4  2/3    0\n[4,] -1/5 -1/4 -1/3  1/2\n[5,] -1/5 -1/4 -1/3 -1/2\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nscaled_sum_code(5) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [,1] [,2] [,3] [,4]\n1  4/5 -1/5 -1/5 -1/5\n2 -1/5  4/5 -1/5 -1/5\n3 -1/5 -1/5  4/5 -1/5\n4 -1/5 -1/5 -1/5  4/5\n5 -1/5 -1/5 -1/5 -1/5\n```\n:::\n:::\n\n\n:::\n\nNote that I use the term *scaled sum coding* for the \"pairwise comparisons with\nmain effects\" contrast scheme.\nI opt for this term for three reasons.\n\n- First, I see sum coding used more frequently in statistics and econometrics to refer\nto +1/-1; this is also what `contr.sum` in R returns.\n- Second, the salient part of going from sum coding to scaled sum coding, especially\nin the 2-level case, is that there's some kind of division or scaling operation\ninvolved; I frequently see people use `contr.sum(2)/2`, although importantly\n`contr.sum(3)/3` does not yield the expected result.\n- Third, \"simple\" coding is counterintuitive to me since we're trying to *avoid* \n\"simple effects;\" \"effects coding\" and \"contrast coding\" are largely meaningless\nas all coding schemes will encode some kind of effect, and setting *any*\ncontrast matrix is an instance of contrast coding.\n\nSo, for the researcher trying to remember \"I need to use *those* contrasts\nwhere they're divided to get the main effects\", it (to me) seems easy to\nreach for a tool where *scaled* is in the name and is clearly distinguished\nfrom sum coding. [^namenote]\n\n[^namenote]: If it were really up to me, I would call it \"centered pairwise coding\" since\nyou get pairwise comparisons with the intercept centered on the grand mean,\nbut it doesn't quite roll off the tongue and it's a bit wordy to type out.\n\n## Typical approach to contrast coding\n\nTypically when I see people in Linguistics set contrasts, they\ndo something like the following, using the `palmerpenguins` dataset as an \nexample.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)          # Data wrangling\nlibrary(purrr)          # Mapping functions\nlibrary(palmerpenguins) # Dataset\npenguins_with_contrasts <- penguins\n\n# Default treatment/dummy coding for a 2 and 3 level factor\ncontrasts(penguins_with_contrasts$sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       male\nfemale    0\nmale      1\n```\n:::\n\n```{.r .cell-code}\ncontrasts(penguins_with_contrasts$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Chinstrap Gentoo\nAdelie            0      0\nChinstrap         1      0\nGentoo            0      1\n```\n:::\n\n```{.r .cell-code}\n# Easy enough for 2 levels, -contr.sum(2)/2 is also used a lot\ncontrasts(penguins_with_contrasts$sex) <- c(-.5, .5) \n\n# Not so fun for three levels!\ncontrasts(penguins_with_contrasts$species) <- matrix(c(-1/3, 2/3, -1/3,\n                                                       -1/3, -1/3, 2/3),\n                                                     nrow = 3)\n```\n:::\n\n\nThe chance of making a mistake increases when including more and more\ncategorical variables.\nCatching these mistakes can be very difficult, in part because this workflow\nerases the labels in the regression output.\nThis means you have to keep track of what `1` and `2` in the regression\ncoefficients correspond to.\n\n::: {.callout-note}\n## Note: Column/Comparison/Coefficient names\n\nWhile the `dimnames` argument can be used to set the labels, anecdotally\nI rarely see people use this in their analyses when perusing code on the osf. \n@winter2019 [p. 127] notes that \"Using the '1' after the predictor name is a notational\nconvention for representing the slopes of sum-coded predictors in R\" but this is\nslightly incorrect; in the absence of `dimnames` being set, R will use the\nnumeric indices of the contrast matrix's columns (no matter what the scheme is).\n\n:::\n\nBelow, the two sets of coefficients represent pairwise comparisons to\nthe `Adelie` baseline, but the intercepts differ due to how the contrasts\nare set, with the first using treatment coding and the second using\nscaled sum coding.\nI'll start with a case that only considers the categorical variable,\nbut will include an additional continuous independent variable later on.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compare the default treatment coding with the penguins dataset\n# with the contrasts we specified in penguins_with_contrasts\ntreatment_coefs <- coef(lm(bill_length_mm ~ species,\n                           data = penguins))    \nscaledsum_coefs <- coef(lm(bill_length_mm ~ species, \n                           data = penguins_with_contrasts)) \n\n# I'm using list() to print and caption results side by side, purely aesthetic\nlist(\"(Default) Treatment Coding\" = treatment_coefs,\n     \"(Manual) Scaled Sum Coding\" = scaledsum_coefs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`(Default) Treatment Coding`\n     (Intercept) speciesChinstrap    speciesGentoo \n       38.791391        10.042433         8.713487 \n\n$`(Manual) Scaled Sum Coding`\n(Intercept)    species1    species2 \n  45.043364   10.042433    8.713487 \n```\n:::\n:::\n\n\nThe model coefficients for the scaled sum coding shows the same pairwise \ncomparisons as the model using treatment coding, but the intercepts differ.\nWe can check what they correspond to manually:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroup_means <- \n  penguins |>\n  dplyr::group_by(species) |> \n  dplyr::summarize(mean_length = mean(bill_length_mm, na.rm = TRUE)) |> \n  purrr::pluck('mean_length') |> \n  `names<-`(c('Adelie', 'Chinstrap', 'Gentoo'))\n\nlist(\"Group means\"= group_means,\n     \"Grand mean\" = mean(group_means))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`Group means`\n   Adelie Chinstrap    Gentoo \n 38.79139  48.83382  47.50488 \n\n$`Grand mean`\n[1] 45.04336\n```\n:::\n:::\n\n\nSo the intercept for the treatment coded model is the mean of the `Adelie`\ngroup while the scaled sum coded model is the *grand mean*, or the mean of\ngroup means.\nBut, typing in the scaled sum contrast matrix was a bit obnoxious with all\nthe `-1/3` we typed.\nIf we had made a slight mistake while typing the matrix out, what would have\nhappened to our model?\nWould our coefficients reflect the averages and differences we were expecting?\nAs an example, let's see what happens when we change a `2/3` to `1/3`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# What if we accidentally typed 1/3 instead of 2/3?\ncontrasts(penguins_with_contrasts$species) <- matrix(c(-1/3, 1/3, -1/3,\n                                                       -1/3, -1/3, 2/3),\n                                                     nrow = 3)\nmistake_coefs <- coef(lm(bill_length_mm ~ species, \n                         data = penguins_with_contrasts))\n\nlist(\"(Current) Mistaken Scaled Sum Coding:\" = mistake_coefs,\n     \"(Previous) Correct Scaled Sum Coding:\" = scaledsum_coefs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`(Current) Mistaken Scaled Sum Coding:`\n(Intercept)    species1    species2 \n  46.717103   15.063649    8.713487 \n\n$`(Previous) Correct Scaled Sum Coding:`\n(Intercept)    species1    species2 \n  45.043364   10.042433    8.713487 \n```\n:::\n:::\n\n\nHere we can see that the intercept and the value for `species1` have increased\nin magnitude.\nIn particular, the new reported effect of `species1` is much larger than\nit previously was.\nIf we stopped at this point, we would conclude that the difference in bill length\nbetween the Chinstrap and Adelie groups is a whopping 15mm (remember we originally\ncalculated it to be about 10).\nIf we were interested in whether there was a positive or negative difference\nthat was significant or not, we'd still make that conclusion, but any claims\nabout the magnitude of the effect would be misguided.\nThis problem opens up a related question though: \nWhat does this new inflated-in-magitude coefficient estimate represent?\n\n### Diagnosing our mistake\n\n\nTo check what these numbers correspond to, we have to check the\n*hypothesis matrix* that corresponds to our *contrast matrix*.\nThe process of obtaining the hypothesis matrix has been referred to as finding\nthe generalized inverse of the contrast matrix [see @schad2020 for details].\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix(c(1, 1, 1,         # Add a column of 1s for the intercept\n         -1/3, 1/3, -1/3,\n         -1/3, -1/3, 2/3),\n       nrow = 3,\n       dimnames = list(NULL, c('Intercept', 'species1', 'species2'))) |> \n  t() |> \n  solve() |> \n  MASS::fractions() # This function just shows numbers as fractions\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Intercept species1 species2\n[1,]  1/6      -3/2       -1    \n[2,]  1/2       3/2        0    \n[3,]  1/3         0        1    \n```\n:::\n:::\n\n\nHere the intercept is represented by the weighted sum of each group mean,\nwhere the weights are shown in the intercept column.\nIn most cases, the intercept should reflect the grand mean, or the mean of the\ngroup means, and so would usually have equal weights (i.e., `1/3` here) for the\nlevels.\nIn this case, we see the fractional weights are not the same.\nWe can verify this by calculating the weighted mean ourselves:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(\"Grand Mean\" = mean(group_means),\n     \"Weighted mean\" = weighted.mean(group_means, c(1/6, 1/2, 1/3)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`Grand Mean`\n[1] 45.04336\n\n$`Weighted mean`\n[1] 46.7171\n```\n:::\n:::\n\n\n\nSimilarly, the coefficient for `species1` shows the difference between the\ngroup means of levels 1 and 2 (i.e., mean of Chinstrap - mean of Adelie) but\ntimes a factor of `3/2`.\nCrucially, if our goal is to evaluate the difference between the means of\nthese two levels, then our mistake in coding the hypothesis matrix will give\nus a larger estimate (~15 vs 10).\nConsider a similar setup where the larger estimate was 5 instead of 0; if\nwe were relying on null hypothesis testing it's possible we'd get a significant\neffect when really we shouldn't have.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(\"Mistaken Scaled Sum Coding\" = mistake_coefs,\n     \"Correct Scaled Sum Coding\" = scaledsum_coefs,\n     \"Computed Chinstrap-Adelie Difference with 3/2 scaling\" = \n       (3/2 * group_means[['Chinstrap']]) - (3/2 * group_means[['Adelie']]),\n     \"Actual Chinstrap-Adelie Difference\" = \n       group_means[['Chinstrap']] - group_means[['Adelie']])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`Mistaken Scaled Sum Coding`\n(Intercept)    species1    species2 \n  46.717103   15.063649    8.713487 \n\n$`Correct Scaled Sum Coding`\n(Intercept)    species1    species2 \n  45.043364   10.042433    8.713487 \n\n$`Computed Chinstrap-Adelie Difference with 3/2 scaling`\n[1] 15.06365\n\n$`Actual Chinstrap-Adelie Difference`\n[1] 10.04243\n```\n:::\n:::\n\n\nPoint being: we made an honest mistake of typing `1/3` instead of `2/3` but\nthis had ramifications for the coefficients in our model output that we use\nto make inferences.\nIn practice, because we did the multiple `contrasts<-` calls, we would likely\nassume that what we did was correct in the absence of any errors.\n\n## Tidy approach to contrasts\n\nHere I'll show a different approach using the `contrastable` package.\nThis package takes a tidy approach to take care of the overhead of\nlabels and reference levels involved when using common contrast coding schemes.\nSpecifically, this package provides a series of functions that use a special \nformula implementation that assigns specific meanings to each operator.\nThe left hand side of the formula is the factor column whose contrasts\nyou want to change.\nThe right hand side consists of (at minimum) a function to generate contrast\nmatrices such as `contr.treatment` or `treatment_code`.\nAdditional operators provide extra optional functionality:\n\n- `+ x`: Set reference level to level `x`\n- `* x`: Set intercept to be the mean of `x`\n- `- 3:4`: For polynomial contrasts only, drop trends `3` and `4`\n- `| c(\"A-B\", \"A-C\")`: Set the comparison labels to `A-B` and `A-C` (must be\nthe last operator if used)\n\nRecall that in many cases researchers want pairwise comparisons while retaining\nmain effects, and so the choice of reference level for the comparisons is\nvery important.\nBy default, R uses the first level alphabetically as the reference level,\nbut sometimes we want to change this manually ourselves.\nHere's an example where we set the `sex` and `species` factors to the two\ncontrast schemes we manually set before.\nThe `set_contrasts` function will show a message if it detects additional\nfactor variables in the dataframe that the user did not provide contrasts for.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(contrastable) was loaded earlier\npenguins_df <- \n  penguins |> \n  set_contrasts(sex ~ scaled_sum_code + \"male\", # Set reference level with +\n                species ~ scaled_sum_code + 'Adelie') \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nExpect contr.treatment or contr.poly for unset factors: island\n```\n:::\n\n```{.r .cell-code}\ncontrasts(penguins_df$species) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Chinstrap Gentoo\nAdelie    -1/3      -1/3  \nChinstrap  2/3      -1/3  \nGentoo    -1/3       2/3  \n```\n:::\n\n```{.r .cell-code}\ncontrasts(penguins_df$sex) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       female\nfemale  1/2  \nmale   -1/2  \n```\n:::\n:::\n\n\n`penguins_df` now has its contrasts set, and we can run our model as usual.\nNote that we didn't have to type out any matrices ourselves, but we got the\ncorrect contrasts that we needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoef(lm(bill_length_mm ~ species + bill_depth_mm, data = penguins_df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     (Intercept) speciesChinstrap    speciesGentoo    bill_depth_mm \n       20.997115         9.938955        13.403279         1.394011 \n```\n:::\n:::\n\n\nIf we wanted to change the labels to better reflect the comparisons being\nmade, we could do that in the formula too with the `|` operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_df <- \n  penguins_df |> \n  set_contrasts(species ~ scaled_sum_code + 'Adelie' | \n                  c('Chinstrap-Ad', 'Gentoo-Ad'))\n\ncoef(lm(bill_length_mm ~ species, data = penguins_df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        (Intercept) speciesChinstrap-Ad    speciesGentoo-Ad \n          45.043364           10.042433            8.713487 \n```\n:::\n:::\n\n\n\n### Additional functions\n\nTypically when I use this package in my analyses the `set_contrasts` function\nis all I really need, but there are other functions that follow\nthe same syntax that provide other information.\nTo avoid retyping things, I'll usually keep the contrasts in a list assigned\nto a separate variable and pass that to functions.\n\nThe `glimpse_contrasts` function can show information about the factors\nin a dataset along with the contrast schemes that have been assigned to each \nfactor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_contrasts <- \n  list(\n    sex ~ scaled_sum_code + 'female',\n    species ~ helmert_code\n  )\n\nglimpse_contrasts(penguins_df, my_contrasts) |> gt::gt()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"hufffsodos\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#hufffsodos .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#hufffsodos .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hufffsodos .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#hufffsodos .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#hufffsodos .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#hufffsodos .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hufffsodos .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hufffsodos .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#hufffsodos .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#hufffsodos .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#hufffsodos .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#hufffsodos .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#hufffsodos .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#hufffsodos .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#hufffsodos .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#hufffsodos .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#hufffsodos .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#hufffsodos .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hufffsodos .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#hufffsodos .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#hufffsodos .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hufffsodos .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#hufffsodos .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#hufffsodos .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hufffsodos .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hufffsodos .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#hufffsodos .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#hufffsodos .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hufffsodos .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hufffsodos .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hufffsodos .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hufffsodos .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hufffsodos .gt_left {\n  text-align: left;\n}\n\n#hufffsodos .gt_center {\n  text-align: center;\n}\n\n#hufffsodos .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#hufffsodos .gt_font_normal {\n  font-weight: normal;\n}\n\n#hufffsodos .gt_font_bold {\n  font-weight: bold;\n}\n\n#hufffsodos .gt_font_italic {\n  font-style: italic;\n}\n\n#hufffsodos .gt_super {\n  font-size: 65%;\n}\n\n#hufffsodos .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#hufffsodos .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#hufffsodos .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#hufffsodos .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#hufffsodos .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#hufffsodos .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#hufffsodos .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"factor\">factor</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"n_levels\">n_levels</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"level_names\">level_names</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"scheme\">scheme</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"reference\">reference</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"intercept\">intercept</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"orthogonal\">orthogonal</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"centered\">centered</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"dropped_trends\">dropped_trends</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"explicitly_set\">explicitly_set</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"factor\" class=\"gt_row gt_left\">sex</td>\n<td headers=\"n_levels\" class=\"gt_row gt_right\">2</td>\n<td headers=\"level_names\" class=\"gt_row gt_center\">female, male</td>\n<td headers=\"scheme\" class=\"gt_row gt_left\">scaled_sum_code</td>\n<td headers=\"reference\" class=\"gt_row gt_left\">female</td>\n<td headers=\"intercept\" class=\"gt_row gt_left\">grand mean</td>\n<td headers=\"orthogonal\" class=\"gt_row gt_center\">NA</td>\n<td headers=\"centered\" class=\"gt_row gt_center\">TRUE</td>\n<td headers=\"dropped_trends\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"explicitly_set\" class=\"gt_row gt_center\">TRUE</td></tr>\n    <tr><td headers=\"factor\" class=\"gt_row gt_left\">species</td>\n<td headers=\"n_levels\" class=\"gt_row gt_right\">3</td>\n<td headers=\"level_names\" class=\"gt_row gt_center\">Adelie, Chinstrap, Gentoo</td>\n<td headers=\"scheme\" class=\"gt_row gt_left\">helmert_code</td>\n<td headers=\"reference\" class=\"gt_row gt_left\">Gentoo</td>\n<td headers=\"intercept\" class=\"gt_row gt_left\">grand mean</td>\n<td headers=\"orthogonal\" class=\"gt_row gt_center\">TRUE</td>\n<td headers=\"centered\" class=\"gt_row gt_center\">TRUE</td>\n<td headers=\"dropped_trends\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"explicitly_set\" class=\"gt_row gt_center\">TRUE</td></tr>\n    <tr><td headers=\"factor\" class=\"gt_row gt_left\">island</td>\n<td headers=\"n_levels\" class=\"gt_row gt_right\">3</td>\n<td headers=\"level_names\" class=\"gt_row gt_center\">Biscoe, Dream, Torgersen</td>\n<td headers=\"scheme\" class=\"gt_row gt_left\">contr.treatment</td>\n<td headers=\"reference\" class=\"gt_row gt_left\">Biscoe</td>\n<td headers=\"intercept\" class=\"gt_row gt_left\">mean(Biscoe)</td>\n<td headers=\"orthogonal\" class=\"gt_row gt_center\">FALSE</td>\n<td headers=\"centered\" class=\"gt_row gt_center\">FALSE</td>\n<td headers=\"dropped_trends\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"explicitly_set\" class=\"gt_row gt_center\">FALSE</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n\nThe `enlist_contrasts` function does the same thing as `set_contrasts`, but\nreturns a list of contrast matrices that can be used in the `contrasts` \nargument of some model-fitting functions.[^1]\nIt also provides an easy way to show the contrast matrices in an appendix\nor supplementary material.\n\n[^1]: Not all modeling functions use the `contrasts` argument, `brms::brm` is \none example. In these cases you *must* set the contrast matrix to the factor,\nhence `set_contrasts` is typically more useful for the actual modeling part \nwhile `enlist_contrasts` is useful for showing matrices.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenlist_contrasts(penguins_df, my_contrasts) |> purrr::map(MASS::fractions)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nExpect contr.treatment or contr.poly for unset factors: island\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$sex\n       male\nfemale -1/2\nmale    1/2\n\n$species\n          >Adelie >Chinstrap\nAdelie     2/3       0      \nChinstrap -1/3     1/2      \nGentoo    -1/3    -1/2      \n```\n:::\n:::\n\n\n### Available contrast schemes\n\nHere are the different contrast functions this package currently provides.\n\n::: {.panel-tabset}\n\n### Treatment\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# = contr.treatment\ntreatment_code(5) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  2 3 4 5\n1 0 0 0 0\n2 1 0 0 0\n3 0 1 0 0\n4 0 0 1 0\n5 0 0 0 1\n```\n:::\n:::\n\n\n### Sum\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# = contr.sum\nsum_code(5) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [,1] [,2] [,3] [,4]\n1  1    0    0    0  \n2  0    1    0    0  \n3  0    0    1    0  \n4  0    0    0    1  \n5 -1   -1   -1   -1  \n```\n:::\n:::\n\n\n### Scaled Sum\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# = contr.sum\nscaled_sum_code(5) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [,1] [,2] [,3] [,4]\n1  4/5 -1/5 -1/5 -1/5\n2 -1/5  4/5 -1/5 -1/5\n3 -1/5 -1/5  4/5 -1/5\n4 -1/5 -1/5 -1/5  4/5\n5 -1/5 -1/5 -1/5 -1/5\n```\n:::\n:::\n\n\n\n### Helmert\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# NOT = contr.helmert, which is unscaled\nhelmert_code(5) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]  4/5    0    0    0\n[2,] -1/5  3/4    0    0\n[3,] -1/5 -1/4  2/3    0\n[4,] -1/5 -1/4 -1/3  1/2\n[5,] -1/5 -1/4 -1/3 -1/2\n```\n:::\n:::\n\n\n### Reverse Helmert\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreverse_helmert_code(5) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,] -1/2 -1/3 -1/4 -1/5\n[2,]  1/2 -1/3 -1/4 -1/5\n[3,]    0  2/3 -1/4 -1/5\n[4,]    0    0  3/4 -1/5\n[5,]    0    0    0  4/5\n```\n:::\n:::\n\n\n\n### Forward Difference\n\n\n::: {.cell}\n\n```{.r .cell-code}\nforward_difference_code(5) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]  4/5  3/5  2/5  1/5\n[2,] -1/5  3/5  2/5  1/5\n[3,] -1/5 -2/5  2/5  1/5\n[4,] -1/5 -2/5 -3/5  1/5\n[5,] -1/5 -2/5 -3/5 -4/5\n```\n:::\n:::\n\n\n### Backward Difference\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbackward_difference_code(5) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,] -4/5 -3/5 -2/5 -1/5\n[2,]  1/5 -3/5 -2/5 -1/5\n[3,]  1/5  2/5 -2/5 -1/5\n[4,]  1/5  2/5  3/5 -1/5\n[5,]  1/5  2/5  3/5  4/5\n```\n:::\n:::\n\n\n\n### Orthogonal Polynomials\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# = contr.poly, poly(1:n, degree = n-1, raw = FALSE)\north_polynomial_code(5) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     .L                .Q                .C                ^4               \n[1,]          -265/419          929/1738  -2026009/6406803        4018/33617\n[2,]  -2026009/6406803         -809/3027           191/302    -246481/515552\n[3,]                 0       -6263/11717                 0         1042/1453\n[4,] 12484830/39480499         -809/3027          -265/419    -246481/515552\n[5,]           191/302          929/1738 10458821/33073696        4018/33617\n```\n:::\n:::\n\n\n### Raw Polynomials\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# = poly(1:n, degree = n-1, raw = TRUE)\nraw_polynomial_code(5) |> MASS::fractions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     1   2   3   4  \n[1,]   1   1   1   1\n[2,]   2   4   8  16\n[3,]   3   9  27  81\n[4,]   4  16  64 256\n[5,]   5  25 125 625\n```\n:::\n:::\n\n\n:::\n\n## Other packages and resources\n\nThis package is not the first package made for contrast coding, though to\nmy knowledge it is the first to take a \"tidy\" approach to it.\n\nThe `hypr` package [@hypr] takes a different approach, where the focus is\non considering the hypothesis matrix and declaring *specifically* which comparisons\nyou want to make, then the package can provide a corresponding matrix.\nI like `hypr` a lot actually, but I find it a bit tedious when I know what the\ncontrast matrix should look like but I have to type out the comparisons; still\nbetter than `matrix` calls though.\n\nThe `emmeans` package [@emmeans] is extremely useful for making pairwise \ncomparisons, but is capable of a lot more as well. You can see its vignette\non contrasts [here](https://cran.r-project.org/web/packages/emmeans/vignettes/comparisons.html).\n\nThe `multcomp` package [@multcomp] is useful for simultaneous inference, which\nseeks to extend workflows for multiple comparisons.\n\nI haven't used the `contrasts` package [@contrasts]\nvery much, but judging from its vignette [here](https://cran.r-project.org/web/packages/contrast/vignettes/contrast.html)\nit seems like it extends the `rms` package's `contrast` function [@rms].\nIt seems useful for calculating different comparisons after a model is run,\nbut its usage isn't very transparent to me on first glance.\n\nWhile not a package, [this page from UCLA](https://stats.oarc.ucla.edu/r/library/r-library-contrast-coding-systems-for-categorical-variables/)\npops up a lot when people discuss contrast coding.\nIt's very useful, and I used it as a starting point for implementing different\ncontrast functions. \nHowever, I will note that I don't follow its naming conventions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.2 (2022-10-31 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 22621)\n\nMatrix products: default\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] palmerpenguins_0.1.1 purrr_1.0.0          dplyr_1.1.0         \n[4] contrastable_0.1.0  \n\nloaded via a namespace (and not attached):\n [1] pillar_1.8.1      compiler_4.2.2    tools_4.2.2       digest_0.6.31    \n [5] jsonlite_1.8.4    evaluate_0.20     lifecycle_1.0.3   tibble_3.1.8     \n [9] gtable_0.3.1      pkgconfig_2.0.3   rlang_1.0.6       cli_3.5.0        \n[13] rstudioapi_0.14   yaml_2.3.7        xfun_0.37         fastmap_1.1.0    \n[17] withr_2.5.0       stringr_1.5.0     knitr_1.42        sass_0.4.5       \n[21] generics_0.1.3    vctrs_0.5.2       htmlwidgets_1.6.1 grid_4.2.2       \n[25] tidyselect_1.2.0  glue_1.6.2        R6_2.5.1          fansi_1.0.3      \n[29] rmarkdown_2.20    ggplot2_3.4.0     magrittr_2.0.3    scales_1.2.1     \n[33] htmltools_0.5.4   MASS_7.3-58.1     gt_0.8.0          colorspace_2.0-3 \n[37] utf8_1.2.2        stringi_1.7.8     munsell_0.5.0     crayon_1.5.2     \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}